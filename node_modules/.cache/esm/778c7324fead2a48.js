let BlogsModel,GraphQLObjectType,GraphQLString,GraphQLID,fields;_fea‍.x([["addBlog",()=>addBlog],["editBlog",()=>editBlog],["deleteBlog",()=>deleteBlog]]);_fea‍.w("../models/Blogs",[["default",["BlogsModel"],function(v){BlogsModel=v}]]);_fea‍.w("graphql",[["GraphQLObjectType",["GraphQLObjectType"],function(v){GraphQLObjectType=v}],["GraphQLString",["GraphQLString"],function(v){GraphQLString=v}],["GraphQLID",["GraphQLID"],function(v){GraphQLID=v}]]);_fea‍.w("../helperFields/BlogAndBlogs",[["default",["fields"],function(v){fields=v}]]);




const addBlog = {
    type: new GraphQLObjectType({
        name: "addBlog",
        fields
    }),
    args: {
        name: { type: GraphQLString },
        createdBy: { type: GraphQLID },
        content: { type: GraphQLString }
    },
    resolve: (parentValue, args) => {
        const newBlog = new BlogsModel(args)
        newBlog.save().then(res => res).catch(er => _fea‍.g.console.log("er adduser", { er }))
        return newBlog;
    }
}

const editBlog = {
    type: new GraphQLObjectType({
        name: "editBlog",
        fields
    }),
    args: {
        id: { type: GraphQLString },
        name: { type: GraphQLString },
        content: { type: GraphQLString }
    },
    resolve: (parentValue, args) => {
        const updatedBlog = BlogsModel.findByIdAndUpdate(args.id, args) 
        .then(res => res)
        .catch(er => _fea‍.g.console.log({ er }))
        return updatedBlog   
    }
}

const deleteBlog = {
    type: new GraphQLObjectType({
        name: "deleteBlog",
        fields
    }),
    args: {
        id: { type: GraphQLString },
    },
    resolve: (parentValue, args) => {
        BlogsModel.findByIdAndDelete(args.id) 
        .then(res => _fea‍.g.console.log({ res }))
        .catch(er => _fea‍.g.console.log({ er }))
        return "Blog Deleted"
    }
}






